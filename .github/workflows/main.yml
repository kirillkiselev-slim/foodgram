name: Main workflow

on:
  push:
    branches:
      - main
      - '*'

jobs:
  flake_tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt
    - name: Test with flake8
      # Вызываем flake8 и указываем ему,
      # что нужно проверить файлы только в папке backend/
      run: python -m flake8 backend/

  build_and_push_to_docker_hub:
    name: Push backend Docker image to DockerHub
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: flake_tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория:
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker:
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        # Авторизация на Docker Hub:
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password:
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          # Хорошо ли держать логин и пароль прямо в коде workflow?
          # Нет, это нехорошо. Хранить пароль надо в Secrets.
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub:
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub:
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию образа:
          tags: kirillkiselev/foodgram_backend:latest

  build_frontend_and_push_to_docker_hub:
    if: github.ref == 'refs/heads/main'
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: kirillkiselev/foodgram_frontend:latest

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
#       Копируем docker-compose.production.yml на продакшен-сервер
      - name: Cp docker-compose.production.yml via ssh
        uses: appleboy/scp-action@master
        # Передаём параметры для action appleboy/scp-action:
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "foodgram"
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram/infra
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/static_django/. /static_django/

  send_message:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Деплой успешно выполнен!
            ${{ github.actor }} закоммитил с сообщением ${{ github.event.commits[0].message }}. 
            Ссылка: https://github.com/${{ github.repository }}/commit/${{ github.sha }}.